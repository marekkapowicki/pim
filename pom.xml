<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.marekk</groupId>
  <artifactId>PIM</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>pim</name>
  <description>Demo project for Spring Boot</description>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <java.version>1.8</java.version>
    <sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
    <sonar.dynamicAnalysis>reuseReports</sonar.dynamicAnalysis>
    <sonar.core.codeCoveragePlugin>jacoco</sonar.core.codeCoveragePlugin>
    <sonar.jacoco.reportPath>${project.basedir}/target/jacoco-unit.exec</sonar.jacoco.reportPath>
    <sonar.jacoco.itReportPath>${project.basedir}/target/jacoco-it.exec</sonar.jacoco.itReportPath>
    <jacoco.version>0.7.9</jacoco.version>
    <sonar.dynamicAnalysis>reuseReports</sonar.dynamicAnalysis>
    <pitest-maven.version>1.2.0</pitest-maven.version>
    <maven-checkstyle-plugin.version>2.17</maven-checkstyle-plugin.version>
    <checkstyle.version>7.6.1</checkstyle.version>
    <HikariCP.version>2.6.1</HikariCP.version>
    <jfairy.version>0.5.6</jfairy.version>
    <assertj-core.version>3.7.0</assertj-core.version>
    <springfox-swagger2.version>2.6.1</springfox-swagger2.version>
    <spring-mock-mvc.version>2.9.0</spring-mock-mvc.version>
    <gmavenplus-plugin.version>1.5</gmavenplus-plugin.version>
    <spock-core.version>1.1-groovy-2.4-rc-4</spock-core.version>
    <cglib-nodep.version>3.2.5</cglib-nodep.version>
    <javaslang.version>2.0.6</javaslang.version>
    <spock-global-unroll.version>0.5.1</spock-global-unroll.version>
    <maven-sortpom-plugin.version>2.3.1</maven-sortpom-plugin.version>
    <liquibase-maven-plugin.version>3.5.3</liquibase-maven-plugin.version>
    <hibernate-validator.version>5.4.1.Final</hibernate-validator.version>
      <opencsv.version>4.2</opencsv.version>
  </properties>

  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>1.5.4.RELEASE</version>
    <relativePath/> <!-- lookup parent from repository -->
  </parent>

  <dependencies>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
      <exclusions>
        <exclusion>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-starter-tomcat</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-rest</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-jetty</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-cache</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-configuration-processor</artifactId>
      <optional>true</optional>
    </dependency>

    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-java8</artifactId>
    </dependency>
    <dependency>
      <groupId>org.liquibase</groupId>
      <artifactId>liquibase-core</artifactId>
    </dependency>
    <dependency>
      <groupId>io.javaslang</groupId>
      <artifactId>javaslang</artifactId>
      <version>${javaslang.version}</version>
    </dependency>
    <dependency>
      <groupId>com.zaxxer</groupId>
      <artifactId>HikariCP</artifactId>
      <version>${HikariCP.version}</version>
    </dependency>
    <dependency>
      <groupId>com.h2database</groupId>
      <artifactId>h2</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <optional>true</optional>
    </dependency>
    <dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger-ui</artifactId>
    <version>${springfox-swagger2.version}</version>
    <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>io.springfox</groupId>
      <artifactId>springfox-swagger2</artifactId>
      <version>${springfox-swagger2.version}</version>
      <exclusions>
          <exclusion>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
          </exclusion>
      </exclusions>
    </dependency>

    <dependency>
      <groupId>com.fasterxml.jackson.datatype</groupId>
      <artifactId>jackson-datatype-jsr310</artifactId>
      <version>2.8.8</version>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-validator</artifactId>
      <version>${hibernate-validator.version}</version>
    </dependency>
    <dependency>
      <groupId>com.opencsv</groupId>
      <artifactId>opencsv</artifactId>
      <version>${opencsv.version}</version>
    </dependency>
    <dependency>
      <groupId>io.codearte.jfairy</groupId>
      <artifactId>jfairy</artifactId>
      <version>${jfairy.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.assertj</groupId>
      <artifactId>assertj-core</artifactId>
      <version>${assertj-core.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.jayway.restassured</groupId>
      <artifactId>spring-mock-mvc</artifactId>
      <version>${spring-mock-mvc.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>info.solidsoft.spock</groupId>
      <artifactId>spock-global-unroll</artifactId>
      <version>${spock-global-unroll.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.spockframework</groupId>
      <artifactId>spock-core</artifactId>
      <version>${spock-core.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>cglib</groupId>
      <artifactId>cglib-nodep</artifactId>
      <version>${cglib-nodep.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.spockframework</groupId>
      <artifactId>spock-spring</artifactId>
      <version>${spock-core.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
  <profiles>
    <profile>
      <id>itest</id>

      <build>
        <plugins>
          <plugin>
            <groupId>org.jacoco</groupId>
            <artifactId>jacoco-maven-plugin</artifactId>
            <version>${jacoco.version}</version>
            <executions>
              <!-- prepare agent for measuring unit tests -->
              <execution>
                <id>prepare-unit-tests</id>
                <goals>
                  <goal>prepare-agent</goal>
                </goals>
                <configuration>
                  <destFile>${sonar.jacoco.reportPath}</destFile>
                </configuration>
              </execution>
              <!-- prepare agent for measuring integration tests -->
              <execution>
                <id>prepare-integration-tests</id>
                <goals>
                  <goal>prepare-agent</goal>
                </goals>
                <phase>pre-integration-test</phase>
                <configuration>
                  <destFile>${sonar.jacoco.itReportPath}</destFile>
                  <propertyName>itCoverageAgent</propertyName>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <executions>
              <execution>
                <goals>
                  <goal>integration-test</goal>
                  <goal>verify</goal>
                </goals>
                <phase>integration-test</phase>
                <configuration>
                  <argLine>${itCoverageAgent}</argLine>
                  <includes>
                    <include>**/*ITSpec.java</include>
                  </includes>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>default</id>

      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-checkstyle-plugin</artifactId>
            <version>${maven-checkstyle-plugin.version}</version>
            <configuration>
              <skip>true</skip>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>documentation</id>
      <properties>
          <swagger2markup-plugin.version>1.3.3</swagger2markup-plugin.version>
          <swagger2markup.version>1.3.2</swagger2markup.version>
          <asciidoctor.input.directory>${project.basedir}/src/docs/asciidoc</asciidoctor.input.directory>
          <swagger.snippetOutput.dir>${project.build.directory}/asciidoc/snippets</swagger.snippetOutput.dir>
          <swagger.output.dir>${project.build.directory}/generated/swagger</swagger.output.dir>
          <swagger.input>${swagger.output.dir}/swagger.json</swagger.input>
          <generated.asciidoc.directory>${project.build.directory}/asciidoc/generated</generated.asciidoc.directory>
          <asciidoctor.html.output.directory>${project.build.directory}/asciidoc/html</asciidoctor.html.output.directory>
          <asciidoctor.pdf.output.directory>${project.build.directory}/asciidoc/pdf</asciidoctor.pdf.output.directory>
          <markdown_to_asciidoc.version>1.1</markdown_to_asciidoc.version>
          <asciidoctor-maven-plugin.version>1.5.6</asciidoctor-maven-plugin.version>
          <asciidoctorj-pdf.version>1.5.0-alpha.16</asciidoctorj-pdf.version>
          <jruby-complete.version>1.7.21</jruby-complete.version>
      </properties>
      <pluginRepositories>
        <pluginRepository>
          <id>jcenter-snapshots</id>
          <name>jcenter</name>
          <url>http://oss.jfrog.org/artifactory/oss-snapshot-local/</url>
        </pluginRepository>
        <pluginRepository>
          <id>jcenter-releases</id>
          <name>jcenter</name>
          <url>http://jcenter.bintray.com</url>
          <snapshots>
            <enabled>false</enabled>
          </snapshots>
        </pluginRepository>
      </pluginRepositories>

      <repositories>
        <repository>
          <id>jcentral</id>
          <name>bintray</name>
          <url>http://jcenter.bintray.com</url>
          <snapshots>
            <enabled>false</enabled>
          </snapshots>
        </repository>
        <repository>
          <id>jcenter-snapshots</id>
          <name>jcenter</name>
          <url>http://oss.jfrog.org/artifactory/oss-snapshot-local/</url>
        </repository>
      </repositories>

      <dependencies>

        <dependency>
          <groupId>org.springframework.restdocs</groupId>
          <artifactId>spring-restdocs-mockmvc</artifactId>
        </dependency>
        <dependency>
          <groupId>io.github.swagger2markup</groupId>
          <artifactId>swagger2markup-spring-restdocs-ext</artifactId>
          <version>1.3.1</version>
          <scope>test</scope>
        </dependency>
      </dependencies>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
              <skip>false</skip>
              <includes>

                <include>**/*JsonGenerator*</include>
              </includes>
              <excludes>
                <exclude>**/*ITSpec.java</exclude>
              </excludes>
              <systemPropertyVariables>
                <io.springfox.staticdocs.outputDir>${swagger.output.dir}</io.springfox.staticdocs.outputDir>
                <io.springfox.staticdocs.snippetsOutputDir>${swagger.snippetOutput.dir}</io.springfox.staticdocs.snippetsOutputDir>
              </systemPropertyVariables>
            </configuration>
          </plugin>

          <plugin>
            <groupId>io.github.swagger2markup</groupId>
            <artifactId>swagger2markup-maven-plugin</artifactId>
            <version>${swagger2markup-plugin.version}</version>
            <dependencies>
              <dependency>
                <groupId>io.github.swagger2markup</groupId>
                <artifactId>swagger2markup</artifactId>
                <version>${swagger2markup.version}</version>
              </dependency>

              <dependency>
                <groupId>nl.jworks.markdown_to_asciidoc</groupId>
                <artifactId>markdown_to_asciidoc</artifactId>
                <version>${markdown_to_asciidoc.version}</version>
                <type>pom</type>
              </dependency>
            </dependencies>
            <configuration>
              <swaggerInput>${swagger.input}</swaggerInput>
              <!-- For the documentation of the config, see  Reference documentation at https://github.com/Swagger2Markup/swagger2markup-maven-plugin -->
              <config>
                <swagger2markup.markupLanguage>ASCIIDOC</swagger2markup.markupLanguage>
                <swagger2markup.swaggerMarkupLanguage>ASCIIDOC</swagger2markup.swaggerMarkupLanguage>
                <swagger2markup.generatedExamplesEnabled>true</swagger2markup.generatedExamplesEnabled>
                <swagger2markup.pathsGroupedBy>TAGS</swagger2markup.pathsGroupedBy>
                <swagger2markup.extensions.dynamicOverview.contentPath>
                  ${project.basedir}/src/main/docs/asciidoc/extensions/overview
                </swagger2markup.extensions.dynamicOverview.contentPath>
                <swagger2markup.extensions.dynamicDefinitions.contentPath>
                  ${project.basedir}/src/main/docs/asciidoc/extensions/definitions
                </swagger2markup.extensions.dynamicDefinitions.contentPath>
                <swagger2markup.extensions.dynamicPaths.contentPath>
                  ${project.basedir}/src/main/docs/asciidoc/extensions/paths
                </swagger2markup.extensions.dynamicPaths.contentPath>
                <swagger2markup.extensions.dynamicSecurity.contentPath>
                  ${project.basedir}src/main/docs/asciidoc/extensions/security/
                </swagger2markup.extensions.dynamicSecurity.contentPath>
                <swagger2markup.propertyOrderBy>AS_IS</swagger2markup.propertyOrderBy>
              </config>
            </configuration>
            <executions>
              <execution>
                <phase>test</phase>
                <goals>
                  <goal>convertSwagger2markup</goal>
                </goals>
                <configuration>
                  <swaggerInput>${swagger.input}</swaggerInput>
                  <outputDir>${generated.asciidoc.directory}</outputDir>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <!-- Run the generated asciidoc through Asciidoctor to generate
                        other documentation types, such as PDFs or HTML5 -->
          <plugin>
            <groupId>org.asciidoctor</groupId>
            <artifactId>asciidoctor-maven-plugin</artifactId>
            <version>${asciidoctor-maven-plugin.version}</version>
            <!-- Include Asciidoctor PDF for pdf generation -->
            <dependencies>
              <dependency>
                <groupId>org.asciidoctor</groupId>
                <artifactId>asciidoctorj-pdf</artifactId>
                <version>${asciidoctorj-pdf.version}</version>
              </dependency>
              <dependency>
                <groupId>org.jruby</groupId>
                <artifactId>jruby-complete</artifactId>
                <version>${jruby-complete.version}</version>
              </dependency>
            </dependencies>
            <!-- Configure generic document generation settings -->
            <configuration>
              <sourceDirectory>${asciidoctor.input.directory}</sourceDirectory>
              <sourceDocumentName>index.adoc</sourceDocumentName>
              <attributes>
                <!-- Since 1.5.0-alpha.9 PDF back-end can use 'rouge' as well as 'coderay' source highlighting -->
                <sourceHighlighter>rouge</sourceHighlighter>

                <icons>font</icons>
                <pagenums/>
                <sectnums/>
                <toc>left</toc>
                <toclevels>3</toclevels>
                <idprefix/>
                <idseparator>-</idseparator>
                <sourcedir>${project.build.sourceDirectory}</sourcedir>
              </attributes>
            </configuration>
            <!-- Since each execution can only handle one backend, run
                 separate executions for each desired output type -->
            <executions>
              <execution>
                <id>output-html</id>
                <phase>test</phase>
                <goals>
                  <goal>process-asciidoc</goal>
                </goals>
                <configuration>
                  <backend>html5</backend>
                  <outputDirectory>${asciidoctor.html.output.directory}</outputDirectory>
                  <attributes>
                    <generated>${generated.asciidoc.directory}</generated>
                  </attributes>
                </configuration>
              </execution>
              <execution>
                <id>output-pdf</id>
                <phase>test</phase>
                <goals>
                  <goal>process-asciidoc</goal>
                </goals>
                <configuration>
                  <backend>pdf</backend>
                  <outputDirectory>${asciidoctor.pdf.output.directory}</outputDirectory>
                  <attributes>
                    <generated>${generated.asciidoc.directory}</generated>
                  </attributes>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <!-- copy the generated documents -->
          <plugin>
            <artifactId>maven-resources-plugin</artifactId>
            <version>2.7</version>
            <executions>
              <execution>
                <id>copy-resources</id>
                <phase>prepare-package</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <outputDirectory>${project.build.outputDirectory}/static/docs</outputDirectory>
                  <resources>
                    <resource>
                      <directory>${asciidoctor.html.output.directory}</directory>
                    </resource>
                    <resource>
                      <directory>${asciidoctor.pdf.output.directory}</directory>
                    </resource>
                  </resources>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.gmavenplus</groupId>
        <artifactId>gmavenplus-plugin</artifactId>
        <version>${gmavenplus-plugin.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>compile</goal>
              <goal>testCompile</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>com.google.code.sortpom</groupId>
        <artifactId>maven-sortpom-plugin</artifactId>
        <version>${maven-sortpom-plugin.version}</version>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <skip>false</skip>
          <includes>
            <include>**/*Spec.java</include> <!-- Yes, .java extension -->
            <include>**/*Test.java</include>
          </includes>
          <excludes>
            <exclude>**/*JsonGenerator*</exclude>
            <exclude>**/*ITSpec.java</exclude>
          </excludes>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.7.0</version>
        <configuration>
          <source>1.8</source>
          <target>1.8</target>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
        <version>${maven-checkstyle-plugin.version}</version>
        <dependencies>
          <dependency>
            <groupId>com.puppycrawl.tools</groupId>
            <artifactId>checkstyle</artifactId>
            <version>${checkstyle.version}</version>
          </dependency>
        </dependencies>
        <executions>
          <execution>
            <id>validate</id>
            <phase>validate</phase>
            <configuration>
              <configLocation>checkstyle.xml</configLocation>
              <encoding>UTF-8</encoding>
              <consoleOutput>true</consoleOutput>
              <failsOnError>true</failsOnError>
            </configuration>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.pitest</groupId>
        <artifactId>pitest-maven</artifactId>
        <version>${pitest-maven.version}</version>
      </plugin>
    </plugins>
  </build>
</project>
